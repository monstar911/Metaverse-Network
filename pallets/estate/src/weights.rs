
//! Autogenerated weights for `estate`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-04, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// --pallet=estate
// --extrinsic=*
// --steps=20
// --repeat=10
// --execution=wasm
// --wasm-execution=compiled
// --raw
// --output
// ./pallets/estate/src/weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for estate.
pub trait WeightInfo {
	fn set_max_bounds() -> Weight;
	fn active_issue_undeploy_land_block() -> Weight;
	fn issue_undeployed_land_blocks() -> Weight;
	fn mint_land() -> Weight;
	fn mint_lands() -> Weight;
	fn transfer_land() -> Weight;
	fn mint_estate() -> Weight;
	fn create_estate() -> Weight;
	fn transfer_estate() -> Weight;
	fn deploy_land_block() -> Weight;
	fn freeze_undeployed_land_blocks() -> Weight;
	fn unfreeze_undeployed_land_blocks() -> Weight;
	fn transfer_undeployed_land_blocks() -> Weight;
	fn burn_undeployed_land_blocks() -> Weight;
	fn approve_undeployed_land_blocks() -> Weight;
	fn unapprove_undeployed_land_blocks() -> Weight;
}

/// Weights for estate using the Acala node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_max_bounds() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	fn mint_land() -> Weight {
		(61_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	fn mint_lands() -> Weight {
		(77_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Auction ItemsInAuction (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	fn transfer_land() -> Weight {
		(52_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate NextEstateId (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	// Storage: Estate AllEstatesCount (r:1 w:1)
	// Storage: Estate EstateOwner (r:0 w:1)
	// Storage: Estate Estates (r:0 w:1)
	fn mint_estate() -> Weight {
		(76_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Estate NextEstateId (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllEstatesCount (r:1 w:1)
	// Storage: Estate EstateOwner (r:0 w:1)
	// Storage: Estate Estates (r:0 w:1)
	fn create_estate() -> Weight {
		(114_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Auction ItemsInAuction (r:1 w:0)
	// Storage: Estate EstateOwner (r:1 w:2)
	fn transfer_estate() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Estate NextUndeployedLandBlockId (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	// Storage: Estate UndeployedLandBlocks (r:0 w:20)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:20)
	fn issue_undeployed_land_blocks() -> Weight {
		(739_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(42 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn freeze_undeployed_land_blocks() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn unfreeze_undeployed_land_blocks() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:1)
	fn burn_undeployed_land_blocks() -> Weight {
		(55_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn approve_undeployed_land_blocks() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn unapprove_undeployed_land_blocks() -> Weight {
		(46_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:2)
	fn transfer_undeployed_land_blocks() -> Weight {
		(56_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	fn deploy_land_block() -> Weight {
		(111_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Estate MintingRateConfig (r:1 w:0)
	// Storage: Estate Round (r:1 w:1)
	// Storage: Estate AllLandUnitsCount (r:1 w:0)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:0)
	fn active_issue_undeploy_land_block() -> Weight {
		(67_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_max_bounds() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn active_issue_undeploy_land_block() -> Weight {
		(49_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	fn mint_land() -> Weight {
		(61_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
	}
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	fn mint_lands() -> Weight {
		(77_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Auction ItemsInAuction (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	fn transfer_land() -> Weight {
		(52_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate NextEstateId (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:1 w:1)
	// Storage: Estate AllEstatesCount (r:1 w:1)
	// Storage: Estate EstateOwner (r:0 w:1)
	// Storage: Estate Estates (r:0 w:1)
	fn mint_estate() -> Weight {
		(76_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Estate NextEstateId (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllEstatesCount (r:1 w:1)
	// Storage: Estate EstateOwner (r:0 w:1)
	// Storage: Estate Estates (r:0 w:1)
	fn create_estate() -> Weight {
		(114_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Auction ItemsInAuction (r:1 w:0)
	// Storage: Estate EstateOwner (r:1 w:2)
	fn transfer_estate() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Estate NextUndeployedLandBlockId (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	// Storage: Estate UndeployedLandBlocks (r:0 w:20)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:20)
	fn issue_undeployed_land_blocks() -> Weight {
		(739_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(42 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn freeze_undeployed_land_blocks() -> Weight {
		(43_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn unfreeze_undeployed_land_blocks() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:1)
	fn burn_undeployed_land_blocks() -> Weight {
		(55_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn approve_undeployed_land_blocks() -> Weight {
		(42_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	fn unapprove_undeployed_land_blocks() -> Weight {
		(46_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate UndeployedLandBlocksOwner (r:0 w:2)
	fn transfer_undeployed_land_blocks() -> Weight {
		(56_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Estate UndeployedLandBlocks (r:1 w:1)
	// Storage: Estate MaxBounds (r:1 w:0)
	// Storage: Estate LandUnits (r:2 w:2)
	// Storage: Estate AllLandUnitsCount (r:1 w:1)
	// Storage: Estate TotalUndeployedLandUnit (r:1 w:1)
	fn deploy_land_block() -> Weight {
		(111_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
}
